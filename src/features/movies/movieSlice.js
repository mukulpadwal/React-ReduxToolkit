import { createSlice } from "@reduxjs/toolkit";

// Initial state for the movie slice
const initialState = {
  movieList: [
    { id: 1, name: "Movie Name" }, // Predefined movie for initial state
    { id: 2, name: "Movie Name 2" }, // Another predefined movie
  ],
};

// Create a slice of the Redux state for movies
const movieSlice = createSlice({
  name: "movie", // Name of the slice, used to identify actions in the Redux DevTools
  initialState: initialState, // Initial state passed to the slice
  reducers: {
    // Reducer to handle adding a new movie
    addMovie: (state, action) => {
      // Find the id of the last movie and increment it by 1 for the new movie
      state.movieList.push({
        id: state.movieList[state.movieList.length - 1].id + 1,
        name: action.payload.name, // Name of the new movie from the action payload
      });
    },

    // Reducer to handle deleting a movie by its id
    deleteMovie: (state, action) => {
      // Use filter to remove the movie with the matching id from the movie list
      state.movieList = state.movieList.filter(
        (movie) => movie.id !== action.payload.id
      );
    },

    // Reducer to handle updating a movie (TO DO)
    updateMovie: (state, action) => {
      // HOMEWORK: Students can implement this logic
      // HINT:
      // 1. Find the movie in state.movieList by matching the id from action.payload.id
      // 2. Update the movie's properties (like name) with the new values from action.payload
      // 3. Use map() to return a new array with the updated movie while keeping others unchanged
    },
  },
});

// Export the actions generated by createSlice
export const { addMovie, deleteMovie, updateMovie } = movieSlice.actions;

// Export the reducer to be used in the store configuration
export default movieSlice.reducer;
